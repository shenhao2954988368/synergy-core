steps:
  - script: |
      mkdir build-release
      cd build-release
      if [ -z $(which cmake) ]; then cmake3 -DCMAKE_BUILD_TYPE=Release ..; else cmake -DCMAKE_BUILD_TYPE=Release ..; fi
      . ./version
      make -j
    condition: eq(variables['packager'],'deb')
    displayName: 'Build Release deb'
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - script: |
      mkdir build-release
      cd build-release
      if [ -z $(which cmake) ]; then
      cmake3 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/rpm/BUILDROOT/usr ..;
      else cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/rpm/BUILDROOT/usr ..;
      fi
      . ./version
      make -j
    condition: eq(variables['packager'],'rpm')
    displayName: 'Build Release rpm'
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - script: |
      mkdir build-ent
      cd build-ent
      export SYNERGY_ENTERPRISE=1
      if [ -z $(which cmake) ]; then cmake3 -DCMAKE_BUILD_TYPE=Release -DSYNERGY_ENTERPRISE=ON ..; else cmake -DCMAKE_BUILD_TYPE=Release -DSYNERGY_ENTERPRISE=ON ..; fi
      . ./version
      make -j
    displayName: 'Build enterprise'
    condition: eq(variables['packager'],'deb')
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - script: |
      mkdir build-ent
      cd build-ent
      if [ -z $(which cmake) ]; then
      cmake3 -DCMAKE_BUILD_TYPE=Release -DSYNERGY_ENTERPRISE=ON -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/rpm/BUILDROOT/usr ..;
      else cmake -DCMAKE_BUILD_TYPE=Release -DSYNERGY_ENTERPRISE=ON -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/rpm/BUILDROOT/usr ..;
      fi
      . ./version
      make -j
    condition: eq(variables['packager'],'rpm')
    displayName: 'Build enterprise rpm'
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - script: |
      . ./build-release/version
      SYNERGY_VERSION="$SYNERGY_VERSION_MAJOR.$SYNERGY_VERSION_MINOR.$SYNERGY_VERSION_PATCH"
      SYNERGY_REVISION=`git rev-parse --short=8 HEAD`
      SYNERGY_DEB_VERSION="${SYNERGY_VERSION}.${SYNERGY_VERSION_STAGE}~b$(Build.BuildNumber)+${SYNERGY_REVISION}"
      SYNERGY_RPM_VERSION="${SYNERGY_VERSION}-$(Build.BuildNumber).${SYNERGY_VERSION_STAGE}.${SYNERGY_REVISION}"
      echo "##vso[task.setvariable variable=SYNERGY_VERSION_STAGE]${SYNERGY_VERSION_STAGE}"
      echo "##vso[task.setvariable variable=SYNERGY_VERSION]${SYNERGY_VERSION}"
      echo "##vso[task.setvariable variable=SYNERGY_REVISION]${SYNERGY_REVISION}"
      echo "##vso[task.setvariable variable=SYNERGY_DEB_VERSION]${SYNERGY_DEB_VERSION}"
      echo "##vso[task.setvariable variable=SYNERGY_RPM_VERSION]${SYNERGY_RPM_VERSION}"
    displayName: "Setup variables"
    condition: eq(variables['Build.Reason'], 'Manual')

  - script: |
      dch --create --package "synergy" --controlmaint --distribution unstable --newversion $SYNERGY_DEB_VERSION "Initial release"
      export GPG_TTY=$(tty)
      debuild --preserve-envvar SYNERGY_* --preserve-envvar GIT_COMMIT -us -uc
      mkdir standard_package
      cd ..
      filename=$(ls synergy_*.deb)
      filename_new="synergy_${SYNERGY_DEB_VERSION}_$(name)${filename##*${SYNERGY_REVISION}}"
      mv $filename $(Build.Repository.LocalPath)/standard_package/$filename_new
      cd $(Build.Repository.LocalPath)/standard_package
      md5sum $filename_new >> ${filename_new}.checksum.txt
      sha1sum $filename_new >> ${filename_new}.checksum.txt
      sha256sum $filename_new >> ${filename_new}.checksum.txt
      ls -la
    displayName: "Package Binary DEB(Standard)"
    condition: and(eq(variables['packager'],'deb'), eq(variables['Build.Reason'], 'Manual'))
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - script: |
      export SYNERGY_ENTERPRISE=1
      dch --create --package "synergy-enterprise_" --controlmaint --distribution unstable --newversion $(SYNERGY_DEB_VERSION) "Initial release"
      export GPG_TTY=$(tty)
      debuild --preserve-envvar SYNERGY_* --preserve-envvar GIT_COMMIT -us -uc
      mkdir enterprise_package
      cd ..
      filename=$(ls synergy_*.deb)
      filename_new="synergy-enterprise_$(SYNERGY_DEB_VERSION)_$(name)${filename##*$(SYNERGY_REVISION)}"
      mv $filename $(Build.Repository.LocalPath)/enterprise_package/$filename_new
      cd $(Build.Repository.LocalPath)/enterprise_package
      md5sum $filename_new >> ${filename_new}.checksum.txt
      sha1sum $filename_new >> ${filename_new}.checksum.txt
      sha256sum $filename_new >> ${filename_new}.checksum.txt
      ls -la
    displayName: "Package Binary DEB(Enterprise)"
    condition: and(eq(variables['packager'],'deb'), eq(variables['Build.Reason'], 'Manual'))
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - script: |
      cd build-release
      make install/strip
      cd rpm
      rpmbuild -bb --define "_topdir $(pwd)" --buildroot $(pwd)/BUILDROOT synergy.spec
      rpmlint --verbose RPMS/x86_64/*.rpm
      cd RPMS/x86_64
      filename=$(ls *.rpm)
      md5sum $filename >> ${filename}.checksum.txt
      sha1sum $filename >> ${filename}.checksum.txt
      sha256sum $filename >> ${filename}.checksum.txt
      cd ..
      mv x86_64 $(Build.Repository.LocalPath)/standard_package
    displayName: "Package Binary RPM(standard)"
    condition: and(eq(variables['packager'],'rpm'), eq(variables['Build.Reason'], 'Manual'))
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - script: |
      cd build-release
      make install/strip
      cd rpm
      rpmbuild -bb --define "_topdir $(pwd)" --buildroot $(pwd)/BUILDROOT synergy.spec
      rpmlint --verbose RPMS/x86_64/*.rpm
      cd RPMS/x86_64
      filename=$(ls *.rpm)
      md5sum $filename >> ${filename}.checksum.txt
      sha1sum $filename >> ${filename}.checksum.txt
      sha256sum $filename >> ${filename}.checksum.txt
      cd ..
      mv x86_64 $(Build.Repository.LocalPath)/enterprise_package
      ls -la
    displayName: "Package Binary RPM(enterprise)"
    condition: and(eq(variables['packager'],'rpm'), eq(variables['Build.Reason'], 'Manual'))
    env:
      GIT_COMMIT: $(Build.SourceVersion)

  - task: CopyFilesOverSSH@0
    inputs:
      sshEndpoint: 'Azure on Sandor'
      sourceFolder: './standard_package'
      contents: '*'
      targetFolder: 'synergy-core/v1-core-standard/$(SYNERGY_VERSION)/$(SYNERGY_VERSION_STAGE)/$(SYNERGY_REVISION)/'
      readyTimeout: '20000'
    displayName: 'Send standard Package to sandor'
    condition: eq(variables['Build.Reason'], 'Manual')

  - task: CopyFilesOverSSH@0
    inputs:
      sshEndpoint: 'Azure on Sandor'
      sourceFolder: './enterprise_package'
      contents: '*'
      targetFolder: 'synergy-core/v1-core-enterprise/$(SYNERGY_VERSION)/$(SYNERGY_VERSION_STAGE)/$(SYNERGY_REVISION)/'
      readyTimeout: '20000'
    displayName: 'Send enterprise Package to sandor'
    condition: eq(variables['Build.Reason'], 'Manual')